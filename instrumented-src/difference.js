function cov_86i05ppyc(){var path="/Users/macepo/TTY/softatestaus/COMP.SE.swtest/src/difference.js";var hash="21a5c29cac00d2325176ba595ff17f5da913d234";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/Users/macepo/TTY/softatestaus/COMP.SE.swtest/src/difference.js",statementMap:{"0":{start:{line:25,column:2},end:{line:27,column:8}}},fnMap:{"0":{name:"difference",decl:{start:{line:24,column:9},end:{line:24,column:19}},loc:{start:{line:24,column:38},end:{line:28,column:1}},line:24}},branchMap:{"0":{loc:{start:{line:25,column:9},end:{line:27,column:8}},type:"cond-expr",locations:[{start:{line:26,column:6},end:{line:26,column:76}},{start:{line:27,column:6},end:{line:27,column:8}}],line:25}},s:{"0":0},f:{"0":0},b:{"0":[0,0]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"21a5c29cac00d2325176ba595ff17f5da913d234"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_86i05ppyc=function(){return actualCoverage;};}return actualCoverage;}cov_86i05ppyc();import baseDifference from'./.internal/baseDifference.js';import baseFlatten from'./.internal/baseFlatten.js';import isArrayLikeObject from'./isArrayLikeObject.js';/**
 * Creates an array of `array` values not included in the other given arrays
 * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * for equality comparisons. The order and references of result values are
 * determined by the first array.
 *
 * **Note:** Unlike `pullAll`, this method returns a new array.
 *
 * @since 0.1.0
 * @category Array
 * @param {Array} array The array to inspect.
 * @param {...Array} [values] The values to exclude.
 * @returns {Array} Returns the new array of filtered values.
 * @see union, unionBy, unionWith, without, xor, xorBy, xorWith,
 * @example
 *
 * difference([2, 1], [2, 3])
 * // => [1]
 */function difference(array,...values){cov_86i05ppyc().f[0]++;cov_86i05ppyc().s[0]++;return isArrayLikeObject(array)?(cov_86i05ppyc().b[0][0]++,baseDifference(array,baseFlatten(values,1,isArrayLikeObject,true))):(cov_86i05ppyc().b[0][1]++,[]);}export default difference;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3ZfODZpMDVwcHljIiwiYWN0dWFsQ292ZXJhZ2UiLCJiYXNlRGlmZmVyZW5jZSIsImJhc2VGbGF0dGVuIiwiaXNBcnJheUxpa2VPYmplY3QiLCJkaWZmZXJlbmNlIiwiYXJyYXkiLCJ2YWx1ZXMiLCJmIiwicyIsImIiXSwic291cmNlcyI6WyJkaWZmZXJlbmNlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBiYXNlRGlmZmVyZW5jZSBmcm9tICcuLy5pbnRlcm5hbC9iYXNlRGlmZmVyZW5jZS5qcydcbmltcG9ydCBiYXNlRmxhdHRlbiBmcm9tICcuLy5pbnRlcm5hbC9iYXNlRmxhdHRlbi5qcydcbmltcG9ydCBpc0FycmF5TGlrZU9iamVjdCBmcm9tICcuL2lzQXJyYXlMaWtlT2JqZWN0LmpzJ1xuXG4vKipcbiAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgYGFycmF5YCB2YWx1ZXMgbm90IGluY2x1ZGVkIGluIHRoZSBvdGhlciBnaXZlbiBhcnJheXNcbiAqIHVzaW5nIFtgU2FtZVZhbHVlWmVyb2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXNhbWV2YWx1ZXplcm8pXG4gKiBmb3IgZXF1YWxpdHkgY29tcGFyaXNvbnMuIFRoZSBvcmRlciBhbmQgcmVmZXJlbmNlcyBvZiByZXN1bHQgdmFsdWVzIGFyZVxuICogZGV0ZXJtaW5lZCBieSB0aGUgZmlyc3QgYXJyYXkuXG4gKlxuICogKipOb3RlOioqIFVubGlrZSBgcHVsbEFsbGAsIHRoaXMgbWV0aG9kIHJldHVybnMgYSBuZXcgYXJyYXkuXG4gKlxuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgQXJyYXlcbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICogQHBhcmFtIHsuLi5BcnJheX0gW3ZhbHVlc10gVGhlIHZhbHVlcyB0byBleGNsdWRlLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgZmlsdGVyZWQgdmFsdWVzLlxuICogQHNlZSB1bmlvbiwgdW5pb25CeSwgdW5pb25XaXRoLCB3aXRob3V0LCB4b3IsIHhvckJ5LCB4b3JXaXRoLFxuICogQGV4YW1wbGVcbiAqXG4gKiBkaWZmZXJlbmNlKFsyLCAxXSwgWzIsIDNdKVxuICogLy8gPT4gWzFdXG4gKi9cbmZ1bmN0aW9uIGRpZmZlcmVuY2UoYXJyYXksIC4uLnZhbHVlcykge1xuICByZXR1cm4gaXNBcnJheUxpa2VPYmplY3QoYXJyYXkpXG4gICAgPyBiYXNlRGlmZmVyZW5jZShhcnJheSwgYmFzZUZsYXR0ZW4odmFsdWVzLCAxLCBpc0FycmF5TGlrZU9iamVjdCwgdHJ1ZSkpXG4gICAgOiBbXVxufVxuXG5leHBvcnQgZGVmYXVsdCBkaWZmZXJlbmNlXG4iXSwibWFwcGluZ3MiOiJ3Z0NBZVk7QUFBQUEsYUFBQSxTQUFBQSxDQUFBLFNBQUFDLGNBQUEsV0FBQUEsY0FBQSxFQUFBRCxhQUFBLEdBZlosTUFBTyxDQUFBRSxjQUFjLEtBQU0sK0JBQStCLENBQzFELE1BQU8sQ0FBQUMsV0FBVyxLQUFNLDRCQUE0QixDQUNwRCxNQUFPLENBQUFDLGlCQUFpQixLQUFNLHdCQUF3QixDQUV0RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUNBLFFBQVMsQ0FBQUMsVUFBVUEsQ0FBQ0MsS0FBSyxDQUFFLEdBQUdDLE1BQU0sQ0FBRSxDQUFBUCxhQUFBLEdBQUFRLENBQUEsTUFBQVIsYUFBQSxHQUFBUyxDQUFBLE1BQ3BDLE1BQU8sQ0FBQUwsaUJBQWlCLENBQUNFLEtBQUssQ0FBQyxFQUFBTixhQUFBLEdBQUFVLENBQUEsU0FDM0JSLGNBQWMsQ0FBQ0ksS0FBSyxDQUFFSCxXQUFXLENBQUNJLE1BQU0sQ0FBRSxDQUFDLENBQUVILGlCQUFpQixDQUFFLElBQUksQ0FBQyxDQUFDLEdBQUFKLGFBQUEsR0FBQVUsQ0FBQSxTQUN0RSxFQUFFLEVBQ1IsQ0FFQSxjQUFlLENBQUFMLFVBQVUiLCJpZ25vcmVMaXN0IjpbXX0=