function cov_4sk0kaxhi(){var path="/Users/macepo/TTY/softatestaus/COMP.SE.swtest/src/toString.js";var hash="99ad470bb29984b03770bb1b8844cd2534c4f6f7";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/Users/macepo/TTY/softatestaus/COMP.SE.swtest/src/toString.js",statementMap:{"0":{start:{line:4,column:17},end:{line:4,column:22}},"1":{start:{line:28,column:2},end:{line:30,column:3}},"2":{start:{line:29,column:4},end:{line:29,column:16}},"3":{start:{line:31,column:2},end:{line:34,column:3}},"4":{start:{line:33,column:4},end:{line:33,column:77}},"5":{start:{line:33,column:35},end:{line:33,column:74}},"6":{start:{line:35,column:2},end:{line:37,column:3}},"7":{start:{line:36,column:4},end:{line:36,column:27}},"8":{start:{line:38,column:17},end:{line:38,column:27}},"9":{start:{line:39,column:2},end:{line:39,column:68}}},fnMap:{"0":{name:"toString",decl:{start:{line:25,column:9},end:{line:25,column:17}},loc:{start:{line:25,column:25},end:{line:40,column:1}},line:25},"1":{name:"(anonymous_1)",decl:{start:{line:33,column:24},end:{line:33,column:25}},loc:{start:{line:33,column:35},end:{line:33,column:74}},line:33}},branchMap:{"0":{loc:{start:{line:28,column:2},end:{line:30,column:3}},type:"if",locations:[{start:{line:28,column:2},end:{line:30,column:3}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:28},"1":{loc:{start:{line:31,column:2},end:{line:34,column:3}},type:"if",locations:[{start:{line:31,column:2},end:{line:34,column:3}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:31},"2":{loc:{start:{line:33,column:35},end:{line:33,column:74}},type:"cond-expr",locations:[{start:{line:33,column:51},end:{line:33,column:56}},{start:{line:33,column:59},end:{line:33,column:74}}],line:33},"3":{loc:{start:{line:35,column:2},end:{line:37,column:3}},type:"if",locations:[{start:{line:35,column:2},end:{line:37,column:3}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:35},"4":{loc:{start:{line:39,column:9},end:{line:39,column:68}},type:"cond-expr",locations:[{start:{line:39,column:55},end:{line:39,column:59}},{start:{line:39,column:62},end:{line:39,column:68}}],line:39},"5":{loc:{start:{line:39,column:10},end:{line:39,column:51}},type:"binary-expr",locations:[{start:{line:39,column:10},end:{line:39,column:23}},{start:{line:39,column:27},end:{line:39,column:51}}],line:39}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0},f:{"0":0,"1":0},b:{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"99ad470bb29984b03770bb1b8844cd2534c4f6f7"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_4sk0kaxhi=function(){return actualCoverage;};}return actualCoverage;}cov_4sk0kaxhi();import isSymbol from'./isSymbol.js';/** Used as references for various `Number` constants. */const INFINITY=(cov_4sk0kaxhi().s[0]++,1/0);/**
 * Converts `value` to a string. An empty string is returned for `null`
 * and `undefined` values. The sign of `-0` is preserved.
 *
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {string} Returns the converted string.
 * @example
 *
 * toString(null)
 * // => ''
 *
 * toString(-0)
 * // => '-0'
 *
 * toString([1, 2, 3])
 * // => '1,2,3'
 */function toString(value){cov_4sk0kaxhi().f[0]++;cov_4sk0kaxhi().s[1]++;// Exit early for strings to avoid a performance hit in some environments.
if(typeof value==='string'){cov_4sk0kaxhi().b[0][0]++;cov_4sk0kaxhi().s[2]++;return value;}else{cov_4sk0kaxhi().b[0][1]++;}cov_4sk0kaxhi().s[3]++;if(Array.isArray(value)){cov_4sk0kaxhi().b[1][0]++;cov_4sk0kaxhi().s[4]++;// Recursively convert values (susceptible to call stack limits).
return`${value.map(other=>{cov_4sk0kaxhi().f[1]++;cov_4sk0kaxhi().s[5]++;return other==null?(cov_4sk0kaxhi().b[2][0]++,other):(cov_4sk0kaxhi().b[2][1]++,toString(other));})}`;}else{cov_4sk0kaxhi().b[1][1]++;}cov_4sk0kaxhi().s[6]++;if(isSymbol(value)){cov_4sk0kaxhi().b[3][0]++;cov_4sk0kaxhi().s[7]++;return value.toString();}else{cov_4sk0kaxhi().b[3][1]++;}const result=(cov_4sk0kaxhi().s[8]++,`${value}`);cov_4sk0kaxhi().s[9]++;return(cov_4sk0kaxhi().b[5][0]++,result=='0')&&(cov_4sk0kaxhi().b[5][1]++,1/value==-INFINITY)?(cov_4sk0kaxhi().b[4][0]++,'-0'):(cov_4sk0kaxhi().b[4][1]++,result);}export default toString;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3ZfNHNrMGtheGhpIiwiYWN0dWFsQ292ZXJhZ2UiLCJpc1N5bWJvbCIsIklORklOSVRZIiwicyIsInRvU3RyaW5nIiwidmFsdWUiLCJmIiwiYiIsIkFycmF5IiwiaXNBcnJheSIsIm1hcCIsIm90aGVyIiwicmVzdWx0Il0sInNvdXJjZXMiOlsidG9TdHJpbmcuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGlzU3ltYm9sIGZyb20gJy4vaXNTeW1ib2wuanMnXG5cbi8qKiBVc2VkIGFzIHJlZmVyZW5jZXMgZm9yIHZhcmlvdXMgYE51bWJlcmAgY29uc3RhbnRzLiAqL1xuY29uc3QgSU5GSU5JVFkgPSAxIC8gMFxuXG4vKipcbiAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYSBzdHJpbmcuIEFuIGVtcHR5IHN0cmluZyBpcyByZXR1cm5lZCBmb3IgYG51bGxgXG4gKiBhbmQgYHVuZGVmaW5lZGAgdmFsdWVzLiBUaGUgc2lnbiBvZiBgLTBgIGlzIHByZXNlcnZlZC5cbiAqXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb252ZXJ0LlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgY29udmVydGVkIHN0cmluZy5cbiAqIEBleGFtcGxlXG4gKlxuICogdG9TdHJpbmcobnVsbClcbiAqIC8vID0+ICcnXG4gKlxuICogdG9TdHJpbmcoLTApXG4gKiAvLyA9PiAnLTAnXG4gKlxuICogdG9TdHJpbmcoWzEsIDIsIDNdKVxuICogLy8gPT4gJzEsMiwzJ1xuICovXG5mdW5jdGlvbiB0b1N0cmluZyh2YWx1ZSkge1xuICBcbiAgLy8gRXhpdCBlYXJseSBmb3Igc3RyaW5ncyB0byBhdm9pZCBhIHBlcmZvcm1hbmNlIGhpdCBpbiBzb21lIGVudmlyb25tZW50cy5cbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gdmFsdWVcbiAgfVxuICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAvLyBSZWN1cnNpdmVseSBjb252ZXJ0IHZhbHVlcyAoc3VzY2VwdGlibGUgdG8gY2FsbCBzdGFjayBsaW1pdHMpLlxuICAgIHJldHVybiBgJHt2YWx1ZS5tYXAoKG90aGVyKSA9PiBvdGhlciA9PSBudWxsID8gb3RoZXIgOiB0b1N0cmluZyhvdGhlcikpfWBcbiAgfVxuICBpZiAoaXNTeW1ib2wodmFsdWUpKSB7XG4gICAgcmV0dXJuIHZhbHVlLnRvU3RyaW5nKClcbiAgfVxuICBjb25zdCByZXN1bHQgPSBgJHt2YWx1ZX1gXG4gIHJldHVybiAocmVzdWx0ID09ICcwJyAmJiAoMSAvIHZhbHVlKSA9PSAtSU5GSU5JVFkpID8gJy0wJyA6IHJlc3VsdFxufVxuXG5leHBvcnQgZGVmYXVsdCB0b1N0cmluZ1xuIl0sIm1hcHBpbmdzIjoia3lGQWVZO0FBQUFBLGFBQUEsU0FBQUEsQ0FBQSxTQUFBQyxjQUFBLFdBQUFBLGNBQUEsRUFBQUQsYUFBQSxHQWZaLE1BQU8sQ0FBQUUsUUFBUSxLQUFNLGVBQWUsQ0FFcEMseURBQ0EsS0FBTSxDQUFBQyxRQUFRLEVBQUFILGFBQUEsR0FBQUksQ0FBQSxNQUFHLENBQUMsQ0FBRyxDQUFDLEVBRXRCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQ0EsUUFBUyxDQUFBQyxRQUFRQSxDQUFDQyxLQUFLLENBQUUsQ0FBQU4sYUFBQSxHQUFBTyxDQUFBLE1BQUFQLGFBQUEsR0FBQUksQ0FBQSxNQUV2QjtBQUNBLEdBQUksTUFBTyxDQUFBRSxLQUFLLEdBQUssUUFBUSxDQUFFLENBQUFOLGFBQUEsR0FBQVEsQ0FBQSxTQUFBUixhQUFBLEdBQUFJLENBQUEsTUFDN0IsTUFBTyxDQUFBRSxLQUFLLENBQ2QsQ0FBQyxLQUFBTixhQUFBLEdBQUFRLENBQUEsVUFBQVIsYUFBQSxHQUFBSSxDQUFBLE1BQ0QsR0FBSUssS0FBSyxDQUFDQyxPQUFPLENBQUNKLEtBQUssQ0FBQyxDQUFFLENBQUFOLGFBQUEsR0FBQVEsQ0FBQSxTQUFBUixhQUFBLEdBQUFJLENBQUEsTUFDeEI7QUFDQSxNQUFPLEdBQUdFLEtBQUssQ0FBQ0ssR0FBRyxDQUFFQyxLQUFLLEVBQUssQ0FBQVosYUFBQSxHQUFBTyxDQUFBLE1BQUFQLGFBQUEsR0FBQUksQ0FBQSxhQUFBUSxLQUFLLEVBQUksSUFBSSxFQUFBWixhQUFBLEdBQUFRLENBQUEsU0FBR0ksS0FBSyxHQUFBWixhQUFBLEdBQUFRLENBQUEsU0FBR0gsUUFBUSxDQUFDTyxLQUFLLENBQUMsRUFBRCxDQUFDLENBQUMsRUFBRSxDQUMzRSxDQUFDLEtBQUFaLGFBQUEsR0FBQVEsQ0FBQSxVQUFBUixhQUFBLEdBQUFJLENBQUEsTUFDRCxHQUFJRixRQUFRLENBQUNJLEtBQUssQ0FBQyxDQUFFLENBQUFOLGFBQUEsR0FBQVEsQ0FBQSxTQUFBUixhQUFBLEdBQUFJLENBQUEsTUFDbkIsTUFBTyxDQUFBRSxLQUFLLENBQUNELFFBQVEsQ0FBQyxDQUFDLENBQ3pCLENBQUMsS0FBQUwsYUFBQSxHQUFBUSxDQUFBLFVBQ0QsS0FBTSxDQUFBSyxNQUFNLEVBQUFiLGFBQUEsR0FBQUksQ0FBQSxNQUFHLEdBQUdFLEtBQUssRUFBRSxFQUFBTixhQUFBLEdBQUFJLENBQUEsTUFDekIsTUFBUSxDQUFBSixhQUFBLEdBQUFRLENBQUEsU0FBQUssTUFBTSxFQUFJLEdBQUcsSUFBQWIsYUFBQSxHQUFBUSxDQUFBLFNBQUssQ0FBQyxDQUFHRixLQUFLLEVBQUssQ0FBQ0gsUUFBUSxHQUFBSCxhQUFBLEdBQUFRLENBQUEsU0FBSSxJQUFJLEdBQUFSLGFBQUEsR0FBQVEsQ0FBQSxTQUFHSyxNQUFNLEVBQ3BFLENBRUEsY0FBZSxDQUFBUixRQUFRIiwiaWdub3JlTGlzdCI6W119