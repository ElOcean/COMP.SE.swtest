function cov_d70roa8ua(){var path="/Users/macepo/TTY/softatestaus/COMP.SE.swtest/src/memoize.js";var hash="a3265df075ff071ecbacf89d904ee9f8ba5dd450";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/Users/macepo/TTY/softatestaus/COMP.SE.swtest/src/memoize.js",statementMap:{"0":{start:{line:44,column:2},end:{line:46,column:3}},"1":{start:{line:45,column:4},end:{line:45,column:46}},"2":{start:{line:47,column:19},end:{line:57,column:3}},"3":{start:{line:48,column:16},end:{line:48,column:63}},"4":{start:{line:49,column:18},end:{line:49,column:32}},"5":{start:{line:51,column:4},end:{line:53,column:5}},"6":{start:{line:52,column:6},end:{line:52,column:27}},"7":{start:{line:54,column:19},end:{line:54,column:41}},"8":{start:{line:55,column:4},end:{line:55,column:52}},"9":{start:{line:56,column:4},end:{line:56,column:17}},"10":{start:{line:58,column:2},end:{line:58,column:45}},"11":{start:{line:59,column:2},end:{line:59,column:17}},"12":{start:{line:62,column:0},end:{line:62,column:19}}},fnMap:{"0":{name:"memoize",decl:{start:{line:43,column:9},end:{line:43,column:16}},loc:{start:{line:43,column:33},end:{line:60,column:1}},line:43},"1":{name:"(anonymous_1)",decl:{start:{line:47,column:19},end:{line:47,column:20}},loc:{start:{line:47,column:37},end:{line:57,column:3}},line:47}},branchMap:{"0":{loc:{start:{line:44,column:2},end:{line:46,column:3}},type:"if",locations:[{start:{line:44,column:2},end:{line:46,column:3}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:44},"1":{loc:{start:{line:44,column:6},end:{line:44,column:88}},type:"binary-expr",locations:[{start:{line:44,column:6},end:{line:44,column:32}},{start:{line:44,column:37},end:{line:44,column:53}},{start:{line:44,column:57},end:{line:44,column:87}}],line:44},"2":{loc:{start:{line:48,column:16},end:{line:48,column:63}},type:"cond-expr",locations:[{start:{line:48,column:27},end:{line:48,column:53}},{start:{line:48,column:56},end:{line:48,column:63}}],line:48},"3":{loc:{start:{line:51,column:4},end:{line:53,column:5}},type:"if",locations:[{start:{line:51,column:4},end:{line:53,column:5}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:51},"4":{loc:{start:{line:55,column:21},end:{line:55,column:52}},type:"binary-expr",locations:[{start:{line:55,column:21},end:{line:55,column:43}},{start:{line:55,column:47},end:{line:55,column:52}}],line:55},"5":{loc:{start:{line:58,column:24},end:{line:58,column:44}},type:"binary-expr",locations:[{start:{line:58,column:24},end:{line:58,column:37}},{start:{line:58,column:41},end:{line:58,column:44}}],line:58}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0},f:{"0":0,"1":0},b:{"0":[0,0],"1":[0,0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"a3265df075ff071ecbacf89d904ee9f8ba5dd450"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_d70roa8ua=function(){return actualCoverage;};}return actualCoverage;}cov_d70roa8ua();/**
 * Creates a function that memoizes the result of `func`. If `resolver` is
 * provided, it determines the cache key for storing the result based on the
 * arguments provided to the memoized function. By default, the first argument
 * provided to the memoized function is used as the map cache key. The `func`
 * is invoked with the `this` binding of the memoized function.
 *
 * **Note:** The cache is exposed as the `cache` property on the memoized
 * function. Its creation may be customized by replacing the `memoize.Cache`
 * constructor with one whose instances implement the
 * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
 * method interface of `clear`, `delete`, `get`, `has`, and `set`.
 *
 * @since 0.1.0
 * @category Function
 * @param {Function} func The function to have its output memoized.
 * @param {Function} [resolver] The function to resolve the cache key.
 * @returns {Function} Returns the new memoized function.
 * @example
 *
 * const object = { 'a': 1, 'b': 2 }
 * const other = { 'c': 3, 'd': 4 }
 *
 * const values = memoize(values)
 * values(object)
 * // => [1, 2]
 *
 * values(other)
 * // => [3, 4]
 *
 * object.a = 2
 * values(object)
 * // => [1, 2]
 *
 * // Modify the result cache.
 * values.cache.set(object, ['a', 'b'])
 * values(object)
 * // => ['a', 'b']
 *
 * // Replace `memoize.Cache`.
 * memoize.Cache = WeakMap
 */function memoize(func,resolver){cov_d70roa8ua().f[0]++;cov_d70roa8ua().s[0]++;if((cov_d70roa8ua().b[1][0]++,typeof func!=='function')||(cov_d70roa8ua().b[1][1]++,resolver!=null)&&(cov_d70roa8ua().b[1][2]++,typeof resolver!=='function')){cov_d70roa8ua().b[0][0]++;cov_d70roa8ua().s[1]++;throw new TypeError('Expected a function');}else{cov_d70roa8ua().b[0][1]++;}cov_d70roa8ua().s[2]++;const memoized=function(...args){cov_d70roa8ua().f[1]++;const key=(cov_d70roa8ua().s[3]++,resolver?(cov_d70roa8ua().b[2][0]++,resolver.apply(this,args)):(cov_d70roa8ua().b[2][1]++,args[0]));const cache=(cov_d70roa8ua().s[4]++,memoized.cache);cov_d70roa8ua().s[5]++;if(cache.has(key)){cov_d70roa8ua().b[3][0]++;cov_d70roa8ua().s[6]++;return cache.get(key);}else{cov_d70roa8ua().b[3][1]++;}const result=(cov_d70roa8ua().s[7]++,func.apply(this,args));cov_d70roa8ua().s[8]++;memoized.cache=(cov_d70roa8ua().b[4][0]++,cache.set(key,result))||(cov_d70roa8ua().b[4][1]++,cache);cov_d70roa8ua().s[9]++;return result;};cov_d70roa8ua().s[10]++;memoized.cache=new((cov_d70roa8ua().b[5][0]++,memoize.Cache)||(cov_d70roa8ua().b[5][1]++,Map))();cov_d70roa8ua().s[11]++;return memoized;}cov_d70roa8ua().s[12]++;memoize.Cache=Map;export default memoize;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3ZfZDcwcm9hOHVhIiwiYWN0dWFsQ292ZXJhZ2UiLCJtZW1vaXplIiwiZnVuYyIsInJlc29sdmVyIiwiZiIsInMiLCJiIiwiVHlwZUVycm9yIiwibWVtb2l6ZWQiLCJhcmdzIiwia2V5IiwiYXBwbHkiLCJjYWNoZSIsImhhcyIsImdldCIsInJlc3VsdCIsInNldCIsIkNhY2hlIiwiTWFwIl0sInNvdXJjZXMiOlsibWVtb2l6ZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IG1lbW9pemVzIHRoZSByZXN1bHQgb2YgYGZ1bmNgLiBJZiBgcmVzb2x2ZXJgIGlzXG4gKiBwcm92aWRlZCwgaXQgZGV0ZXJtaW5lcyB0aGUgY2FjaGUga2V5IGZvciBzdG9yaW5nIHRoZSByZXN1bHQgYmFzZWQgb24gdGhlXG4gKiBhcmd1bWVudHMgcHJvdmlkZWQgdG8gdGhlIG1lbW9pemVkIGZ1bmN0aW9uLiBCeSBkZWZhdWx0LCB0aGUgZmlyc3QgYXJndW1lbnRcbiAqIHByb3ZpZGVkIHRvIHRoZSBtZW1vaXplZCBmdW5jdGlvbiBpcyB1c2VkIGFzIHRoZSBtYXAgY2FjaGUga2V5LiBUaGUgYGZ1bmNgXG4gKiBpcyBpbnZva2VkIHdpdGggdGhlIGB0aGlzYCBiaW5kaW5nIG9mIHRoZSBtZW1vaXplZCBmdW5jdGlvbi5cbiAqXG4gKiAqKk5vdGU6KiogVGhlIGNhY2hlIGlzIGV4cG9zZWQgYXMgdGhlIGBjYWNoZWAgcHJvcGVydHkgb24gdGhlIG1lbW9pemVkXG4gKiBmdW5jdGlvbi4gSXRzIGNyZWF0aW9uIG1heSBiZSBjdXN0b21pemVkIGJ5IHJlcGxhY2luZyB0aGUgYG1lbW9pemUuQ2FjaGVgXG4gKiBjb25zdHJ1Y3RvciB3aXRoIG9uZSB3aG9zZSBpbnN0YW5jZXMgaW1wbGVtZW50IHRoZVxuICogW2BNYXBgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1wcm9wZXJ0aWVzLW9mLXRoZS1tYXAtcHJvdG90eXBlLW9iamVjdClcbiAqIG1ldGhvZCBpbnRlcmZhY2Ugb2YgYGNsZWFyYCwgYGRlbGV0ZWAsIGBnZXRgLCBgaGFzYCwgYW5kIGBzZXRgLlxuICpcbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBoYXZlIGl0cyBvdXRwdXQgbWVtb2l6ZWQuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcmVzb2x2ZXJdIFRoZSBmdW5jdGlvbiB0byByZXNvbHZlIHRoZSBjYWNoZSBrZXkuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBtZW1vaXplZCBmdW5jdGlvbi5cbiAqIEBleGFtcGxlXG4gKlxuICogY29uc3Qgb2JqZWN0ID0geyAnYSc6IDEsICdiJzogMiB9XG4gKiBjb25zdCBvdGhlciA9IHsgJ2MnOiAzLCAnZCc6IDQgfVxuICpcbiAqIGNvbnN0IHZhbHVlcyA9IG1lbW9pemUodmFsdWVzKVxuICogdmFsdWVzKG9iamVjdClcbiAqIC8vID0+IFsxLCAyXVxuICpcbiAqIHZhbHVlcyhvdGhlcilcbiAqIC8vID0+IFszLCA0XVxuICpcbiAqIG9iamVjdC5hID0gMlxuICogdmFsdWVzKG9iamVjdClcbiAqIC8vID0+IFsxLCAyXVxuICpcbiAqIC8vIE1vZGlmeSB0aGUgcmVzdWx0IGNhY2hlLlxuICogdmFsdWVzLmNhY2hlLnNldChvYmplY3QsIFsnYScsICdiJ10pXG4gKiB2YWx1ZXMob2JqZWN0KVxuICogLy8gPT4gWydhJywgJ2InXVxuICpcbiAqIC8vIFJlcGxhY2UgYG1lbW9pemUuQ2FjaGVgLlxuICogbWVtb2l6ZS5DYWNoZSA9IFdlYWtNYXBcbiAqL1xuZnVuY3Rpb24gbWVtb2l6ZShmdW5jLCByZXNvbHZlcikge1xuICBpZiAodHlwZW9mIGZ1bmMgIT09ICdmdW5jdGlvbicgfHwgKHJlc29sdmVyICE9IG51bGwgJiYgdHlwZW9mIHJlc29sdmVyICE9PSAnZnVuY3Rpb24nKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIGEgZnVuY3Rpb24nKVxuICB9XG4gIGNvbnN0IG1lbW9pemVkID0gZnVuY3Rpb24oLi4uYXJncykge1xuICAgIGNvbnN0IGtleSA9IHJlc29sdmVyID8gcmVzb2x2ZXIuYXBwbHkodGhpcywgYXJncykgOiBhcmdzWzBdXG4gICAgY29uc3QgY2FjaGUgPSBtZW1vaXplZC5jYWNoZVxuXG4gICAgaWYgKGNhY2hlLmhhcyhrZXkpKSB7XG4gICAgICByZXR1cm4gY2FjaGUuZ2V0KGtleSlcbiAgICB9XG4gICAgY29uc3QgcmVzdWx0ID0gZnVuYy5hcHBseSh0aGlzLCBhcmdzKVxuICAgIG1lbW9pemVkLmNhY2hlID0gY2FjaGUuc2V0KGtleSwgcmVzdWx0KSB8fCBjYWNoZVxuICAgIHJldHVybiByZXN1bHRcbiAgfVxuICBtZW1vaXplZC5jYWNoZSA9IG5ldyAobWVtb2l6ZS5DYWNoZSB8fCBNYXApXG4gIHJldHVybiBtZW1vaXplZFxufVxuXG5tZW1vaXplLkNhY2hlID0gTWFwXG5cbmV4cG9ydCBkZWZhdWx0IG1lbW9pemVcbiJdLCJtYXBwaW5ncyI6InNnR0FlWTtBQUFBQSxhQUFBLFNBQUFBLENBQUEsU0FBQUMsY0FBQSxXQUFBQSxjQUFBLEVBQUFELGFBQUEsR0FmWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FDQSxRQUFTLENBQUFFLE9BQU9BLENBQUNDLElBQUksQ0FBRUMsUUFBUSxDQUFFLENBQUFKLGFBQUEsR0FBQUssQ0FBQSxNQUFBTCxhQUFBLEdBQUFNLENBQUEsTUFDL0IsR0FBSSxDQUFBTixhQUFBLEdBQUFPLENBQUEsZUFBTyxDQUFBSixJQUFJLEdBQUssVUFBVSxHQUFLLENBQUFILGFBQUEsR0FBQU8sQ0FBQSxTQUFBSCxRQUFRLEVBQUksSUFBSSxJQUFBSixhQUFBLEdBQUFPLENBQUEsU0FBSSxNQUFPLENBQUFILFFBQVEsR0FBSyxVQUFVLENBQUMsQ0FBRSxDQUFBSixhQUFBLEdBQUFPLENBQUEsU0FBQVAsYUFBQSxHQUFBTSxDQUFBLE1BQ3RGLEtBQU0sSUFBSSxDQUFBRSxTQUFTLENBQUMscUJBQXFCLENBQUMsQ0FDNUMsQ0FBQyxLQUFBUixhQUFBLEdBQUFPLENBQUEsVUFBQVAsYUFBQSxHQUFBTSxDQUFBLE1BQ0QsS0FBTSxDQUFBRyxRQUFRLENBQUcsUUFBQUEsQ0FBUyxHQUFHQyxJQUFJLENBQUUsQ0FBQVYsYUFBQSxHQUFBSyxDQUFBLE1BQ2pDLEtBQU0sQ0FBQU0sR0FBRyxFQUFBWCxhQUFBLEdBQUFNLENBQUEsTUFBR0YsUUFBUSxFQUFBSixhQUFBLEdBQUFPLENBQUEsU0FBR0gsUUFBUSxDQUFDUSxLQUFLLENBQUMsSUFBSSxDQUFFRixJQUFJLENBQUMsR0FBQVYsYUFBQSxHQUFBTyxDQUFBLFNBQUdHLElBQUksQ0FBQyxDQUFDLENBQUMsR0FDM0QsS0FBTSxDQUFBRyxLQUFLLEVBQUFiLGFBQUEsR0FBQU0sQ0FBQSxNQUFHRyxRQUFRLENBQUNJLEtBQUssRUFBQWIsYUFBQSxHQUFBTSxDQUFBLE1BRTVCLEdBQUlPLEtBQUssQ0FBQ0MsR0FBRyxDQUFDSCxHQUFHLENBQUMsQ0FBRSxDQUFBWCxhQUFBLEdBQUFPLENBQUEsU0FBQVAsYUFBQSxHQUFBTSxDQUFBLE1BQ2xCLE1BQU8sQ0FBQU8sS0FBSyxDQUFDRSxHQUFHLENBQUNKLEdBQUcsQ0FBQyxDQUN2QixDQUFDLEtBQUFYLGFBQUEsR0FBQU8sQ0FBQSxVQUNELEtBQU0sQ0FBQVMsTUFBTSxFQUFBaEIsYUFBQSxHQUFBTSxDQUFBLE1BQUdILElBQUksQ0FBQ1MsS0FBSyxDQUFDLElBQUksQ0FBRUYsSUFBSSxDQUFDLEVBQUFWLGFBQUEsR0FBQU0sQ0FBQSxNQUNyQ0csUUFBUSxDQUFDSSxLQUFLLENBQUcsQ0FBQWIsYUFBQSxHQUFBTyxDQUFBLFNBQUFNLEtBQUssQ0FBQ0ksR0FBRyxDQUFDTixHQUFHLENBQUVLLE1BQU0sQ0FBQyxJQUFBaEIsYUFBQSxHQUFBTyxDQUFBLFNBQUlNLEtBQUssRUFBQWIsYUFBQSxHQUFBTSxDQUFBLE1BQ2hELE1BQU8sQ0FBQVUsTUFBTSxDQUNmLENBQUMsQ0FBQWhCLGFBQUEsR0FBQU0sQ0FBQSxPQUNERyxRQUFRLENBQUNJLEtBQUssQ0FBRyxJQUFLLENBQUFiLGFBQUEsR0FBQU8sQ0FBQSxTQUFBTCxPQUFPLENBQUNnQixLQUFLLElBQUFsQixhQUFBLEdBQUFPLENBQUEsU0FBSVksR0FBRyxJQUFDLENBQUFuQixhQUFBLEdBQUFNLENBQUEsT0FDM0MsTUFBTyxDQUFBRyxRQUFRLENBQ2pCLENBQUNULGFBQUEsR0FBQU0sQ0FBQSxPQUVESixPQUFPLENBQUNnQixLQUFLLENBQUdDLEdBQUcsQ0FFbkIsY0FBZSxDQUFBakIsT0FBTyIsImlnbm9yZUxpc3QiOltdfQ==