function cov_kwnoy77hi(){var path="/Users/macepo/TTY/softatestaus/COMP.SE.swtest/src/every.js";var hash="8e415fffafd1d36c8677b8c2a214b165364cf900";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/Users/macepo/TTY/softatestaus/COMP.SE.swtest/src/every.js",statementMap:{"0":{start:{line:23,column:14},end:{line:23,column:16}},"1":{start:{line:24,column:17},end:{line:24,column:49}},"2":{start:{line:26,column:2},end:{line:30,column:3}},"3":{start:{line:27,column:4},end:{line:29,column:5}},"4":{start:{line:28,column:6},end:{line:28,column:18}},"5":{start:{line:31,column:2},end:{line:31,column:13}}},fnMap:{"0":{name:"every",decl:{start:{line:22,column:9},end:{line:22,column:14}},loc:{start:{line:22,column:33},end:{line:32,column:1}},line:22}},branchMap:{"0":{loc:{start:{line:24,column:17},end:{line:24,column:49}},type:"cond-expr",locations:[{start:{line:24,column:33},end:{line:24,column:34}},{start:{line:24,column:37},end:{line:24,column:49}}],line:24},"1":{loc:{start:{line:27,column:4},end:{line:29,column:5}},type:"if",locations:[{start:{line:27,column:4},end:{line:29,column:5}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:27}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0},f:{"0":0},b:{"0":[0,0],"1":[0,0]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"8e415fffafd1d36c8677b8c2a214b165364cf900"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_kwnoy77hi=function(){return actualCoverage;};}return actualCoverage;}cov_kwnoy77hi();/**
 * Checks if `predicate` returns truthy for **all** elements of `array`.
 * Iteration is stopped once `predicate` returns falsey. The predicate is
 * invoked with three arguments: (value, index, array).
 *
 * **Note:** This method returns `true` for
 * [empty arrays](https://en.wikipedia.org/wiki/Empty_set) because
 * [everything is true](https://en.wikipedia.org/wiki/Vacuous_truth) of
 * elements of empty arrays.
 *
 * @since 5.0.0
 * @category Array
 * @param {Array} array The array to iterate over.
 * @param {Function} predicate The function invoked per iteration.
 * @returns {boolean} Returns `true` if all elements pass the predicate check,
 *  else `false`.
 * @example
 *
 * every([true, 1, null, 'yes'], Boolean)
 * // => false
 */function every(array,predicate){cov_kwnoy77hi().f[0]++;let index=(cov_kwnoy77hi().s[0]++,-1);const length=(cov_kwnoy77hi().s[1]++,array==null?(cov_kwnoy77hi().b[0][0]++,0):(cov_kwnoy77hi().b[0][1]++,array.length));cov_kwnoy77hi().s[2]++;while(++index<length){cov_kwnoy77hi().s[3]++;if(!predicate(array[index],index,array)){cov_kwnoy77hi().b[1][0]++;cov_kwnoy77hi().s[4]++;return false;}else{cov_kwnoy77hi().b[1][1]++;}}cov_kwnoy77hi().s[5]++;return true;}export default every;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3Zfa3dub3k3N2hpIiwiYWN0dWFsQ292ZXJhZ2UiLCJldmVyeSIsImFycmF5IiwicHJlZGljYXRlIiwiZiIsImluZGV4IiwicyIsImxlbmd0aCIsImIiXSwic291cmNlcyI6WyJldmVyeS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENoZWNrcyBpZiBgcHJlZGljYXRlYCByZXR1cm5zIHRydXRoeSBmb3IgKiphbGwqKiBlbGVtZW50cyBvZiBgYXJyYXlgLlxuICogSXRlcmF0aW9uIGlzIHN0b3BwZWQgb25jZSBgcHJlZGljYXRlYCByZXR1cm5zIGZhbHNleS4gVGhlIHByZWRpY2F0ZSBpc1xuICogaW52b2tlZCB3aXRoIHRocmVlIGFyZ3VtZW50czogKHZhbHVlLCBpbmRleCwgYXJyYXkpLlxuICpcbiAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCByZXR1cm5zIGB0cnVlYCBmb3JcbiAqIFtlbXB0eSBhcnJheXNdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0VtcHR5X3NldCkgYmVjYXVzZVxuICogW2V2ZXJ5dGhpbmcgaXMgdHJ1ZV0oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvVmFjdW91c190cnV0aCkgb2ZcbiAqIGVsZW1lbnRzIG9mIGVtcHR5IGFycmF5cy5cbiAqXG4gKiBAc2luY2UgNS4wLjBcbiAqIEBjYXRlZ29yeSBBcnJheVxuICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHByZWRpY2F0ZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFsbCBlbGVtZW50cyBwYXNzIHRoZSBwcmVkaWNhdGUgY2hlY2ssXG4gKiAgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBldmVyeShbdHJ1ZSwgMSwgbnVsbCwgJ3llcyddLCBCb29sZWFuKVxuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gZXZlcnkoYXJyYXksIHByZWRpY2F0ZSkge1xuICBsZXQgaW5kZXggPSAtMVxuICBjb25zdCBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aFxuXG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgaWYgKCFwcmVkaWNhdGUoYXJyYXlbaW5kZXhdLCBpbmRleCwgYXJyYXkpKSB7XG4gICAgICByZXR1cm4gZmFsc2VcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRydWVcbn1cblxuZXhwb3J0IGRlZmF1bHQgZXZlcnlcbiJdLCJtYXBwaW5ncyI6InNoREFlWTtBQUFBQSxhQUFBLFNBQUFBLENBQUEsU0FBQUMsY0FBQSxXQUFBQSxjQUFBLEVBQUFELGFBQUEsR0FmWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FDQSxRQUFTLENBQUFFLEtBQUtBLENBQUNDLEtBQUssQ0FBRUMsU0FBUyxDQUFFLENBQUFKLGFBQUEsR0FBQUssQ0FBQSxNQUMvQixHQUFJLENBQUFDLEtBQUssRUFBQU4sYUFBQSxHQUFBTyxDQUFBLE1BQUcsQ0FBQyxDQUFDLEVBQ2QsS0FBTSxDQUFBQyxNQUFNLEVBQUFSLGFBQUEsR0FBQU8sQ0FBQSxNQUFHSixLQUFLLEVBQUksSUFBSSxFQUFBSCxhQUFBLEdBQUFTLENBQUEsU0FBRyxDQUFDLEdBQUFULGFBQUEsR0FBQVMsQ0FBQSxTQUFHTixLQUFLLENBQUNLLE1BQU0sR0FBQVIsYUFBQSxHQUFBTyxDQUFBLE1BRS9DLE1BQU8sRUFBRUQsS0FBSyxDQUFHRSxNQUFNLENBQUUsQ0FBQVIsYUFBQSxHQUFBTyxDQUFBLE1BQ3ZCLEdBQUksQ0FBQ0gsU0FBUyxDQUFDRCxLQUFLLENBQUNHLEtBQUssQ0FBQyxDQUFFQSxLQUFLLENBQUVILEtBQUssQ0FBQyxDQUFFLENBQUFILGFBQUEsR0FBQVMsQ0FBQSxTQUFBVCxhQUFBLEdBQUFPLENBQUEsTUFDMUMsTUFBTyxNQUFLLENBQ2QsQ0FBQyxLQUFBUCxhQUFBLEdBQUFTLENBQUEsVUFDSCxDQUFDVCxhQUFBLEdBQUFPLENBQUEsTUFDRCxNQUFPLEtBQUksQ0FDYixDQUVBLGNBQWUsQ0FBQUwsS0FBSyIsImlnbm9yZUxpc3QiOltdfQ==