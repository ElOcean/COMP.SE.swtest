function cov_kts1ym2ei(){var path="/Users/macepo/TTY/softatestaus/COMP.SE.swtest/src/filter.js";var hash="f5711b14a5bcdb03439fc0b52b964df4dcaf5c7b";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/Users/macepo/TTY/softatestaus/COMP.SE.swtest/src/filter.js",statementMap:{"0":{start:{line:25,column:14},end:{line:25,column:16}},"1":{start:{line:26,column:17},end:{line:26,column:18}},"2":{start:{line:27,column:17},end:{line:27,column:49}},"3":{start:{line:28,column:17},end:{line:28,column:21}},"4":{start:{line:30,column:2},end:{line:35,column:3}},"5":{start:{line:31,column:18},end:{line:31,column:30}},"6":{start:{line:32,column:4},end:{line:34,column:5}},"7":{start:{line:33,column:6},end:{line:33,column:32}},"8":{start:{line:36,column:2},end:{line:36,column:15}}},fnMap:{"0":{name:"filter",decl:{start:{line:24,column:9},end:{line:24,column:15}},loc:{start:{line:24,column:34},end:{line:37,column:1}},line:24}},branchMap:{"0":{loc:{start:{line:27,column:17},end:{line:27,column:49}},type:"cond-expr",locations:[{start:{line:27,column:33},end:{line:27,column:34}},{start:{line:27,column:37},end:{line:27,column:49}}],line:27},"1":{loc:{start:{line:32,column:4},end:{line:34,column:5}},type:"if",locations:[{start:{line:32,column:4},end:{line:34,column:5}},{start:{line:undefined,column:undefined},end:{line:undefined,column:undefined}}],line:32}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0},f:{"0":0},b:{"0":[0,0],"1":[0,0]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"f5711b14a5bcdb03439fc0b52b964df4dcaf5c7b"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_kts1ym2ei=function(){return actualCoverage;};}return actualCoverage;}cov_kts1ym2ei();/**
 * Iterates over elements of `array`, returning an array of all elements
 * `predicate` returns truthy for. The predicate is invoked with three
 * arguments: (value, index, array).
 *
 * **Note:** Unlike `remove`, this method returns a new array.
 *
 * @since 5.0.0
 * @category Array
 * @param {Array} array The array to iterate over.
 * @param {Function} predicate The function invoked per iteration.
 * @returns {Array} Returns the new filtered array.
 * @see pull, pullAll, pullAllBy, pullAllWith, pullAt, remove, reject
 * @example
 *
 * const users = [
 *   { 'user': 'barney', 'active': true },
 *   { 'user': 'fred',   'active': false }
 * ]
 *
 * filter(users, ({ active }) => active)
 * // => objects for ['barney']
 */function filter(array,predicate){cov_kts1ym2ei().f[0]++;let index=(cov_kts1ym2ei().s[0]++,-1);let resIndex=(cov_kts1ym2ei().s[1]++,0);const length=(cov_kts1ym2ei().s[2]++,array==null?(cov_kts1ym2ei().b[0][0]++,0):(cov_kts1ym2ei().b[0][1]++,array.length));const result=(cov_kts1ym2ei().s[3]++,[[]]);cov_kts1ym2ei().s[4]++;while(++index<length){const value=(cov_kts1ym2ei().s[5]++,array[index]);cov_kts1ym2ei().s[6]++;if(predicate(value,index,array)){cov_kts1ym2ei().b[1][0]++;cov_kts1ym2ei().s[7]++;result[resIndex++]=value;}else{cov_kts1ym2ei().b[1][1]++;}}cov_kts1ym2ei().s[8]++;return result;}export default filter;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3Zfa3RzMXltMmVpIiwiYWN0dWFsQ292ZXJhZ2UiLCJmaWx0ZXIiLCJhcnJheSIsInByZWRpY2F0ZSIsImYiLCJpbmRleCIsInMiLCJyZXNJbmRleCIsImxlbmd0aCIsImIiLCJyZXN1bHQiLCJ2YWx1ZSJdLCJzb3VyY2VzIjpbImZpbHRlci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEl0ZXJhdGVzIG92ZXIgZWxlbWVudHMgb2YgYGFycmF5YCwgcmV0dXJuaW5nIGFuIGFycmF5IG9mIGFsbCBlbGVtZW50c1xuICogYHByZWRpY2F0ZWAgcmV0dXJucyB0cnV0aHkgZm9yLiBUaGUgcHJlZGljYXRlIGlzIGludm9rZWQgd2l0aCB0aHJlZVxuICogYXJndW1lbnRzOiAodmFsdWUsIGluZGV4LCBhcnJheSkuXG4gKlxuICogKipOb3RlOioqIFVubGlrZSBgcmVtb3ZlYCwgdGhpcyBtZXRob2QgcmV0dXJucyBhIG5ldyBhcnJheS5cbiAqXG4gKiBAc2luY2UgNS4wLjBcbiAqIEBjYXRlZ29yeSBBcnJheVxuICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHByZWRpY2F0ZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZmlsdGVyZWQgYXJyYXkuXG4gKiBAc2VlIHB1bGwsIHB1bGxBbGwsIHB1bGxBbGxCeSwgcHVsbEFsbFdpdGgsIHB1bGxBdCwgcmVtb3ZlLCByZWplY3RcbiAqIEBleGFtcGxlXG4gKlxuICogY29uc3QgdXNlcnMgPSBbXG4gKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgJ2FjdGl2ZSc6IHRydWUgfSxcbiAqICAgeyAndXNlcic6ICdmcmVkJywgICAnYWN0aXZlJzogZmFsc2UgfVxuICogXVxuICpcbiAqIGZpbHRlcih1c2VycywgKHsgYWN0aXZlIH0pID0+IGFjdGl2ZSlcbiAqIC8vID0+IG9iamVjdHMgZm9yIFsnYmFybmV5J11cbiAqL1xuZnVuY3Rpb24gZmlsdGVyKGFycmF5LCBwcmVkaWNhdGUpIHtcbiAgbGV0IGluZGV4ID0gLTFcbiAgbGV0IHJlc0luZGV4ID0gMFxuICBjb25zdCBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aFxuICBjb25zdCByZXN1bHQgPSBbW11dXG5cbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICBjb25zdCB2YWx1ZSA9IGFycmF5W2luZGV4XVxuICAgIGlmIChwcmVkaWNhdGUodmFsdWUsIGluZGV4LCBhcnJheSkpIHtcbiAgICAgIHJlc3VsdFtyZXNJbmRleCsrXSA9IHZhbHVlXG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHRcbn1cblxuZXhwb3J0IGRlZmF1bHQgZmlsdGVyXG4iXSwibWFwcGluZ3MiOiJtdERBZVk7QUFBQUEsYUFBQSxTQUFBQSxDQUFBLFNBQUFDLGNBQUEsV0FBQUEsY0FBQSxFQUFBRCxhQUFBLEdBZlo7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUNBLFFBQVMsQ0FBQUUsTUFBTUEsQ0FBQ0MsS0FBSyxDQUFFQyxTQUFTLENBQUUsQ0FBQUosYUFBQSxHQUFBSyxDQUFBLE1BQ2hDLEdBQUksQ0FBQUMsS0FBSyxFQUFBTixhQUFBLEdBQUFPLENBQUEsTUFBRyxDQUFDLENBQUMsRUFDZCxHQUFJLENBQUFDLFFBQVEsRUFBQVIsYUFBQSxHQUFBTyxDQUFBLE1BQUcsQ0FBQyxFQUNoQixLQUFNLENBQUFFLE1BQU0sRUFBQVQsYUFBQSxHQUFBTyxDQUFBLE1BQUdKLEtBQUssRUFBSSxJQUFJLEVBQUFILGFBQUEsR0FBQVUsQ0FBQSxTQUFHLENBQUMsR0FBQVYsYUFBQSxHQUFBVSxDQUFBLFNBQUdQLEtBQUssQ0FBQ00sTUFBTSxHQUMvQyxLQUFNLENBQUFFLE1BQU0sRUFBQVgsYUFBQSxHQUFBTyxDQUFBLE1BQUcsQ0FBQyxFQUFFLENBQUMsRUFBQVAsYUFBQSxHQUFBTyxDQUFBLE1BRW5CLE1BQU8sRUFBRUQsS0FBSyxDQUFHRyxNQUFNLENBQUUsQ0FDdkIsS0FBTSxDQUFBRyxLQUFLLEVBQUFaLGFBQUEsR0FBQU8sQ0FBQSxNQUFHSixLQUFLLENBQUNHLEtBQUssQ0FBQyxFQUFBTixhQUFBLEdBQUFPLENBQUEsTUFDMUIsR0FBSUgsU0FBUyxDQUFDUSxLQUFLLENBQUVOLEtBQUssQ0FBRUgsS0FBSyxDQUFDLENBQUUsQ0FBQUgsYUFBQSxHQUFBVSxDQUFBLFNBQUFWLGFBQUEsR0FBQU8sQ0FBQSxNQUNsQ0ksTUFBTSxDQUFDSCxRQUFRLEVBQUUsQ0FBQyxDQUFHSSxLQUFLLENBQzVCLENBQUMsS0FBQVosYUFBQSxHQUFBVSxDQUFBLFVBQ0gsQ0FBQ1YsYUFBQSxHQUFBTyxDQUFBLE1BQ0QsTUFBTyxDQUFBSSxNQUFNLENBQ2YsQ0FFQSxjQUFlLENBQUFULE1BQU0iLCJpZ25vcmVMaXN0IjpbXX0=